name: Daily GPT Update # Or Daily Gemini Update if you switch models

on:
  schedule:
    # Runs every day at 8am CST (13:00 UTC)
    # You can adjust this cron schedule as needed
    - cron: '0 13 * * *'
  workflow_dispatch: # Allows manual triggering from the GitHub UI for testing

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write # CRITICAL: Grants the workflow permission to push changes to your repository

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4 # Uses the latest stable version for reliability

      - name: Set up Node.js environment
        uses: actions/setup-node@v4 # Uses the latest stable version
        with:
          node-version: '18' # Ensure this matches your project's Node.js version

      - name: Install Node.js dependencies
        # This assumes you have a package.json file in your repo's root
        run: npm install

      - name: Run update script to generate content
        # Executes your Node.js script, which calls OpenAI/Gemini and writes to historical-news.html
        run: node update.js
        env:
          # IMPORTANT: Ensure this matches the secret name you set in GitHub
          # and the environment variable your update.js script expects (e.g., OPENAI_API_KEY)
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Read generated historical-news.html content
        # This step reads the content of the HTML file generated by update.js
        # and encodes it to base64, making it safe to pass as a workflow output.
        id: read_html # Assigns an ID to this step to reference its outputs later
        run: |
          # 'cat' reads the file, 'base64 -w 0' encodes it without line breaks
          content=$(cat historical-news.html | base64 -w 0)
          # 'echo "name=value" >> $GITHUB_OUTPUT' sets a step output variable
          echo "content=$content" >> $GITHUB_OUTPUT

      - name: Commit updated file via GitHub API
        # This action uses GitHub's API to commit changes, which is more resilient
        # to race conditions and doesn't require complex git command sequences.
        uses: actions/github-script@v7 # Use the latest stable version of this action
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # Uses the automatically provided token
          script: |
            const path = 'historical-news.html'; // Path to the file to update in the repo
            // Retrieve the base64 encoded content from the previous step's output
            const content = `${{ steps.read_html.outputs.content }}`;

            let sha = null; // Initialize SHA. Will be set if the file exists.

            // Attempt to get the existing file's SHA. This is necessary for updating files
            // via the GitHub API. If the file doesn't exist, `sha` remains null (for creation).
            try {
              const { data: fileData } = await github.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path
              });
              sha = fileData.sha; // Extract the SHA if the file was found
              console.log(`Found existing file SHA: ${sha}`);
            } catch (error) {
              // This catch block handles cases where the file does not exist yet (e.g., first run)
              // or other API errors during content fetching.
              console.log(`File ${path} does not exist or error fetching: ${error.message}`);
            }

            // Perform the file update/creation using the GitHub API
            await github.repos.createOrUpdateFileContents({
              owner: context.repo.owner,          // Owner of the repository
              repo: context.repo.repo,            // Name of the repository
              path,                               // Path to the file
              message: 'Automated: Update daily historical news fact', // Commit message
              content,                            // The base64 encoded content
              sha,                                // Pass the SHA (null for new file, actual SHA for update)
              branch: context.ref.split('/').pop() // Target branch (e.g., 'master' or 'main')
            });

            console.log(`Successfully committed changes to ${path}`);